{"version":3,"sources":["core/Country.js","core/Store.js","core/CountryCollection.js","core/loadData.js","views/Dashboard/index.js","views/DashboardWorld/index.js","views/CountryList/index.js","views/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Country","code","name","this","recordSeries","population","mortalityRate","color","Math","floor","random","toString","rawCasesSeries","rawDeathsSeries","rawDateSeries","length","rs","i","date","Date","push","deaths","cases","total","getCases","getDeaths","lastRecordDate","todayAtNoon","setUTCHours","n","m","nDaysAgo","now","mDaysAfter","getTime","r","series","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","countryCollection","collection","c","toLowerCase","includeNoRecord","countries","Object","values","filter","hasRecord","sort","a","b","names","getAllCountries","map","colors","getCasesPerMillion","getDeathsPerMillion","getCasesStartingNDaysAgoDuringMDays","getDeathsStartingNDaysAgoDuringMDays","options","orderValue","order","propToExtract","propToSortOn","args","obj","country","propertyName","value","config","defaultCountryCode","fetch","countryByAbreviationRes","json","countryByAbreviation","countryPopulationRes","countryPopulation","countryPopulationMap","forEach","parseInt","mortalityRateRes","covid19Res","covid19","console","log","configRes","lastFile","countryName","countryAbbr","abbreviation","toUpperCase","setRecordSeries","addCountry","loadData","Dashboard","props","state","countryCode","getCountry","casesSeries","getCasesSeries","cumulatedCasesSeries","getCumulatedCasesSeries","deathsSeries","getDeathsSeries","cumulatedDeathsSeries","getCumulatedDeathsSeries","casesSeriesPerMillion","getCasesSeriesPerMillion","cumulatedCasesSeriesPerMillion","getCumulatedCasesSeriesPerMillion","deathsSeriesPerMillion","getDeathsSeriesPerMillion","cumulatedDeathsSeriesPerMillion","getCumulatedDeathsSeriesPerMillion","topMessage","dataAge","keys","className","getDataAge","dataRegularSeries","labels","datasets","label","data","fill","pointRadius","pointHitRadius","borderColor","lineTension","backgroundColor","dataCumulatedSeries","dataSeriesPerMillion","dataCumulatedSeriesPerMillion","logScale","scales","yAxes","type","nbDayFixer","ceil","casesIntheLast3Days","casesEvolution","src","title","deathsIntheLast3Days","deathsInthe3DaysBefore","deathsEvolution","crudeDeathsPerDay","getCrudeDeathsPerDay","crudeDeathsComp","style","textTransform","fontWeight","textDecoration","href","world","countryCasesLastDay","countryDeathsLastDay","worldCasesLastDay","worldDeathsLastDay","casePieChartData","hoverBackgroundColor","borderWidth","deathPieChartData","float","height","React","Component","DashboardWorld","countryCases","getCountrySortedBy","contryCasesInLastDay","countryDeaths","countryDeathsInLastDay","pieOptions","legend","display","countryCasesPieChartData","countryCasesLastThreeDaysPieChartData","countryDeathsPieChartData","countryDeathsLastThreeDaysPieChartData","width","CountryList","countrySearch","fullCountryList","includes","countryList","flagPath","key","to","placeholder","onChange","e","setState","target","Main","match","params","hasCountry","alert","dashboardComp","ParamsExample","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","init"],"mappings":"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","file":"static/js/main.436e113f.chunk.js","sourcesContent":["const MILLION = 1000000\n\nclass Country {\n\n  constructor(code, name){\n    this.code = code\n    this.name = name\n    this.recordSeries = []\n    this.population = null\n    this.mortalityRate = null\n    this.color = '#'+Math.floor(Math.random()*16777215).toString(16)\n\n    this.rawCasesSeries = []\n    this.rawDeathsSeries = []\n    this.rawDateSeries = []\n  }\n\n\n  hasRecord(){\n    return this.recordSeries.length > 0\n  }\n\n\n  setRecordSeries(rs){\n    this.recordSeries = rs\n    // making actual date objects\n    for(let i=0; i<this.recordSeries.length; i++){\n      this.recordSeries[i].date = new Date(this.recordSeries[i].date)\n      this.rawCasesSeries.push(this.recordSeries[i].deaths)\n      this.rawDeathsSeries.push(this.recordSeries[i].cases)\n      this.rawDateSeries.push(this.recordSeries[i].date)\n    }\n  }\n\n\n  getCases(){\n    let total = 0\n    for(let i=0; i<this.recordSeries.length; i++){\n      total += this.recordSeries[i].cases\n    }\n    return total\n  }\n\n\n  getDeaths(){\n    let total = 0\n    for(let i=0; i<this.recordSeries.length; i++){\n      total += this.recordSeries[i].deaths\n    }\n    return total\n  }\n\n\n  getCrudeDeathsPerDay(){\n    if(this.mortalityRate === null){\n      return null\n    }\n\n    return ~~(this.population * this.mortalityRate / 1000 / 365.25)\n  }\n\n  getCasesPerMillion(){\n    return this.getCases() / (this.population / MILLION)\n  }\n\n\n  getDeathsPerMillion(){\n    return this.getDeaths() / (this.population / MILLION)\n  }\n\n\n  // chec\n  // k if the last date available corresponds to the\n  getDataAge(){\n    let lastRecordDate = this.recordSeries[this.recordSeries.length - 1].date\n    let todayAtNoon = new Date()\n    todayAtNoon.setUTCHours(12, 0, 0, 0)\n    let deltaDays = (todayAtNoon - lastRecordDate) / (24 * 3600 * 1000)\n    return deltaDays\n  }\n\n\n\n  // n days ago start n days ago very early at the morning (1 sec after midnight)\n  // and n days after is also  very early at the morning (1 sec after midnight)\n  // example: \"today\" is n=0 m=1\n  //          \"yesterday\" is n=1 m=1\n  //          \"since yesterday morning\" is n=1 m=2\n  getCasesStartingNDaysAgoDuringMDays(n, m){\n    let nDaysAgo = new Date(Date.now() - n * 1000 * 3600 * 24)\n    // set it to UTC early morning (1 sec after midnight)\n    nDaysAgo.setUTCHours(0, 0, 1, 0)\n    let mDaysAfter = new Date(nDaysAgo.getTime() + m * 1000 * 3600 * 24)\n    // mDaysAfter.setUTCHours(23, 59, 59, 0)\n\n    let total = 0\n    for(let i=this.recordSeries.length - 1; i>=0; i--){\n      let r = this.recordSeries[i]\n      if(r.date > nDaysAgo && r.date < mDaysAfter){\n        total += r.cases\n      }\n    }\n    return total\n  }\n\n\n    // n days ago start n days ago very early at the morning (1 sec after midnight)\n    // and n days after is also  very early at the morning (1 sec after midnight)\n    getDeathsStartingNDaysAgoDuringMDays(n, m){\n      let nDaysAgo = new Date(Date.now() - n * 1000 * 3600 * 24)\n      // set it to UTC early morning (1 sec after midnight)\n      nDaysAgo.setUTCHours(0, 0, 1, 0)\n      let mDaysAfter = new Date(nDaysAgo.getTime() + m * 1000 * 3600 * 24)\n      // mDaysAfter.setUTCHours(23, 59, 59, 0)\n\n      let total = 0\n      for(let i=this.recordSeries.length - 1; i>=0; i--){\n        let r = this.recordSeries[i]\n        if(r.date > nDaysAgo && r.date < mDaysAfter){\n          total += r.deaths\n        }\n      }\n      return total\n    }\n\n    getCasesSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.cases\n      }\n      return series\n    }\n\n    getCasesSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.cases / (this.population / MILLION)\n      }\n      return series\n    }\n\n\n    getCumulatedCasesSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.cases\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total\n      }\n      return series\n    }\n\n\n    getCumulatedCasesSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.cases\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total / (this.population / MILLION)\n      }\n      return series\n    }\n\n\n    getDeathsSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.deaths\n      }\n      return series\n    }\n\n    getDeathsSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.deaths / (this.population / MILLION)\n      }\n      return series\n    }\n\n    getCumulatedDeathsSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.deaths\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total\n      }\n      return series\n    }\n\n    getCumulatedDeathsSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.deaths\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total / (this.population / MILLION)\n      }\n      return series\n    }\n\n}\n\nexport default Country\n","import CountryCollection from './CountryCollection'\n\nconst countryCollection = new CountryCollection()\nconst config = {\n  defaultCountryCode: 'world'\n}\n\nexport {\n  countryCollection,\n  config\n}\n","class CountryCollection {\n\n  constructor(){\n    this.collection = {}\n  }\n\n  addCountry(c){\n    this.collection[c.code] = c\n  }\n\n  getCountry(code){\n    if(code in this.collection){\n      return this.collection[code]\n    }else{\n      return null\n    }\n  }\n\n  hasCountry(code){\n    return (code.toLowerCase() in this.collection)\n  }\n\n\n  getAllCountries(includeNoRecord=false){\n    let countries = Object.values(this.collection)\n    countries = countries.filter(c => c.code !== 'world' )\n    // removes the one without actual data\n    if(!includeNoRecord){\n      countries = countries.filter(c => c.hasRecord())\n    }\n\n    countries = countries.sort((a, b) => a.name < b.name ? -1 : 1)\n    return countries\n  }\n\n\n\n  getCountryNames(includeNoRecord=false){\n    let names = this.getAllCountries(includeNoRecord)\n      .map(c => c.name)\n    return names\n  }\n\n\n  getCountryColors(includeNoRecord=false){\n    let colors = this.getAllCountries(includeNoRecord)\n      .map(c => c.color)\n    return colors\n  }\n\n\n  // get the total cases\n  getCountryCases(includeNoRecord=false){\n    let cases = this.getAllCountries(includeNoRecord)\n      .map(c => c.getCases())\n    return cases\n  }\n\n\n  // get the total deaths\n  getCountryDeaths(includeNoRecord=false){\n    let deaths = this.getAllCountries(includeNoRecord)\n      .map(c => c.getDeaths())\n    return deaths\n  }\n\n  // get the total cases per million\n  getCountryCasesPerMillion(includeNoRecord=false){\n    let cases = this.getAllCountries(includeNoRecord)\n      .map(c => c.getCasesPerMillion())\n    return cases\n  }\n\n\n  // get the total deaths per million\n  getCountryDeathsPerMillion(includeNoRecord=false){\n    let deaths = this.getAllCountries(includeNoRecord)\n      .map(c => c.getDeathsPerMillion())\n    return deaths\n  }\n\n  getCountryCasesStartingNDaysAgoDuringMDays(n, m, includeNoRecord=false){\n    let cases = this.getAllCountries(includeNoRecord)\n      .map(c => c.getCasesStartingNDaysAgoDuringMDays(n, m))\n    return cases\n  }\n\n\n  getCountryDeathsStartingNDaysAgoDuringMDays(n, m, includeNoRecord=false){\n    let deaths = this.getAllCountries(includeNoRecord)\n      .map(c => c.getDeathsStartingNDaysAgoDuringMDays(n, m))\n    return deaths\n  }\n\n\n  // {\n  //   order: 'asc', // can be 'desc'\n  //   propToExtract: 'name', // can be another prop of Country or even a function of it\n  //   propToSortOn: null,  // null means sorting on the extracted prop. Can be a prop of Country (but not a function)\n  //   args: [], // arguments to give if propToExtract is a function\n  //   includeNoRecord: false, // if true, then it will include the countries with no covid record\n  // }\n  getCountrySortedBy(options){\n    let order = 'order' in options ? options.order : 'asc'\n    let orderValue = order === 'asc' ? 1 : -1\n    let propToExtract = 'propToExtract' in options ? options.propToExtract : 'name'\n    let propToSortOn = 'propToSortOn' in options ? options.propToSortOn : null // default is to sort on the extracted prop\n    let args = 'args' in  options ? options.args : []\n    let includeNoRecord = 'includeNoRecord' in options ? options.includeNoRecord : false\n\n    let countries = Object.values(this.collection)\n    // console.log('DEBUG01', countries)\n    // remove world\n    countries = countries.filter(c => c.code !== 'world' )\n    // console.log('DEBUG02', countries)\n    // removes the one without actual data\n    if(!includeNoRecord){\n      countries = countries.filter(c => c.hasRecord())\n    }\n\n    // console.log('DEBUG03', countries)\n    // getting the value\n    countries = countries.map(c => {\n      let obj = {\n        country: c,\n        propertyName: propToExtract,\n        value: null\n      }\n\n      if(propToExtract in c){\n        if(typeof c[propToExtract] === 'function'){\n          obj.value = c[propToExtract](...args)\n        }else{\n          obj.value = c[propToExtract]\n        }\n      }\n      return obj\n    })\n\n    // console.log('DEBUG04', countries)\n\n    // sorting by this value\n    if(propToSortOn === null){\n      countries = countries.sort((a, b) => a.value < b.value ? -1 * orderValue : 1 * orderValue)\n    }else{\n      countries = countries.sort((a, b) => a.country[propToExtract] < b.country[propToExtract] ? -1 * orderValue : 1 * orderValue)\n    }\n    // console.log('DEBUG05', countries)\n    return countries\n  }\n\n}\n\n\nexport default CountryCollection\n","import Country from './Country'\nimport { countryCollection, config } from './Store'\n\nasync function fetchLocalCountryCode(){\n  try{\n    let geoRes = await fetch('http://www.geoplugin.net/json.gp')\n    let geo = await geoRes.json()\n    config.defaultCountryCode = geo.geoplugin_countryCode.toLowerCase()\n  }catch(e){\n    console.log(e)\n  }\n}\n\n\nasync function loadData(){\n  // await fetchLocalCountryCode()\n\n\n  // loading country names and abbreviations\n  let countryByAbreviationRes = await fetch('./data/country-by-abbreviation.json')\n  let countryByAbreviation = await countryByAbreviationRes.json()\n\n  // load population\n  let countryPopulationRes = await fetch('./data/country-by-population.json')\n  let countryPopulation = await countryPopulationRes.json()\n  let countryPopulationMap = {}\n  countryPopulation.forEach(c => {\n    countryPopulationMap[c.country.toLowerCase()] = parseInt(c.population) || null\n  })\n\n  // load mortality rates (1/1000)\n  let mortalityRateRes = await fetch('./data/mortality-rate-per-country-2017.json')\n  let mortalityRate = await mortalityRateRes.json()\n\n  // load covid-19 cases\n  let date = new Date()\n  let day = date.getUTCDate()\n  day = day < 10 ? `0${day}` : `${day}`\n  let month = date.getUTCMonth() + 1\n  month = month < 10 ? `0${month}` : `${month}`\n  let year = `${date.getUTCFullYear()}`\n  let covid19Res = null\n  let covid19 = null\n  try{\n    try{\n      covid19Res = await fetch(`./data/covid19-per-country-${day}-${month}-${year}.json`)\n      covid19 = await covid19Res.json()\n    }catch(e){\n      covid19Res = await fetch(`https://raw.githubusercontent.com/jonathanlurie/covid19dashboard/master/docs/data/covid19-per-country-${day}-${month}-${year}.json`)\n      covid19 = await covid19Res.json()\n    }\n\n  }catch(e){\n    console.log('Fallback on the last report available')\n    let configRes = await fetch('./data/config.json')\n    let config = await configRes.json()\n    try{\n      covid19Res = await fetch(`./data/${config.lastFile}`)\n      covid19 =  await covid19Res.json()\n    }catch(e){\n      covid19Res = await fetch(`https://raw.githubusercontent.com/jonathanlurie/covid19dashboard/master/docs/data/${config.lastFile}`)\n      covid19 =  await covid19Res.json()\n    }\n  }\n\n\n  for(let c=0; c<countryByAbreviation.length; c++){\n    let countryName = countryByAbreviation[c].country.toLowerCase()\n    let countryAbbr = countryByAbreviation[c].abbreviation.toLowerCase()\n    let population = countryPopulationMap[countryName]\n\n    let country = new Country(countryAbbr, countryName)\n    country.population = population\n\n    if(countryAbbr.toUpperCase() in covid19){\n      country.setRecordSeries(covid19[countryAbbr.toUpperCase()])\n    }\n\n    if(countryAbbr.toLowerCase() in mortalityRate){\n      country.mortalityRate = mortalityRate[countryAbbr.toLowerCase()]\n    }\n\n    countryCollection.addCountry(country)\n  }\n\n}\n\nexport default loadData\n","import React from \"react\"\nimport 'chart.js'\n// import { LineChart } from 'react-chartkick'\nimport { Line, Pie } from 'react-chartjs-2'\nimport './style.css'\n\nimport { countryCollection } from '../../core/Store'\n\n\nclass Dashboard extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n\n  }\n\n\n  render(){\n    let countryCode = this.props.countryCode\n    let country = countryCollection.getCountry(countryCode)\n\n    console.log(country)\n\n\n    let casesSeries = country.getCasesSeries()\n    let cumulatedCasesSeries = country.getCumulatedCasesSeries()\n    let deathsSeries = country.getDeathsSeries()\n    let cumulatedDeathsSeries = country.getCumulatedDeathsSeries()\n\n    let casesSeriesPerMillion = country.getCasesSeriesPerMillion()\n    let cumulatedCasesSeriesPerMillion = country.getCumulatedCasesSeriesPerMillion()\n    let deathsSeriesPerMillion = country.getDeathsSeriesPerMillion()\n    let cumulatedDeathsSeriesPerMillion = country.getCumulatedDeathsSeriesPerMillion()\n\n    let numberOfRecords = Object.keys(casesSeries).length\n\n    let topMessage = null\n    let dataAge = 0\n    if(numberOfRecords === 0){\n      topMessage = (\n        <div className=\"warning-message\">\n          ⚠️ There is no record for this country\n        </div>\n      )\n    }else{\n      dataAge = country.getDataAge()\n      console.log('dataAge', dataAge)\n\n      if(dataAge < 0.5){\n        topMessage = (\n          <div className=\"info-message\">\n            ✅ These numbers are fresh from the day\n          </div>\n        )\n      }else if(dataAge >= 0.5 && dataAge <= 1){\n        topMessage = (\n          <div className=\"warning-message\">\n            ⚠️ These numbers are from yesterday, they may not reflect today's reality\n          </div>\n        )\n      }else{\n        topMessage = (\n          <div className=\"warning-message\">\n            ⚠️ These numbers are from {~~dataAge} days ago, they may not reflect todays reality\n          </div>\n        )\n      }\n    }\n\n    // example: https://github.com/jerairrest/react-chartjs-2/blob/master/example/src/components/line.js\n    let dataRegularSeries = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cases',\n          data: Object.values(casesSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(deathsSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n\n    let dataCumulatedSeries = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cumulated cases',\n          data: Object.values(cumulatedCasesSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(cumulatedDeathsSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let dataSeriesPerMillion = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cases per million',\n          data: Object.values(casesSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths per million',\n          data: Object.values(deathsSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let dataCumulatedSeriesPerMillion = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cumulated cases',\n          data: Object.values(cumulatedCasesSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(cumulatedDeathsSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let logScale = {\n      scales: {\n        yAxes: [{\n          type: 'logarithmic',\n        }]\n      }\n    }\n\n\n    let nbDayFixer = dataAge < 0.5 ? 0 : Math.ceil(dataAge)\n    let casesIntheLast3Days = country.getCasesStartingNDaysAgoDuringMDays(2+nbDayFixer, 3)\n    let casesInthe3DaysBefore = country.getCasesStartingNDaysAgoDuringMDays(5+nbDayFixer, 3)\n    let casesEvolution = casesIntheLast3Days > casesInthe3DaysBefore ?\n      <img className=\"evolution-arrow\" src=\"images/arrow-red-up.png\" title=\"Higher than the 3 previous days\"/> :\n      <img className=\"evolution-arrow\" src=\"images/arrow-green-down.png\" title=\"Lower than the previous 3 days\"/>\n\n    let deathsIntheLast3Days = country.getDeathsStartingNDaysAgoDuringMDays(2+nbDayFixer, 3)\n    let deathsInthe3DaysBefore = country.getDeathsStartingNDaysAgoDuringMDays(5+nbDayFixer, 3)\n    let deathsEvolution = deathsIntheLast3Days > deathsInthe3DaysBefore ?\n      <img className=\"evolution-arrow\" src=\"images/arrow-red-up.png\" title=\"Higher than the 3 previous days\"/> :\n      <img className=\"evolution-arrow\" src=\"images/arrow-green-down.png\" title=\"Lower than the previous 3 days\"/>\n\n    console.log('deathsIntheLast3Days', deathsIntheLast3Days)\n    console.log('deathsInthe3DaysBefore', deathsInthe3DaysBefore)\n\n    let crudeDeathsPerDay = country.getCrudeDeathsPerDay()\n\n    let crudeDeathsComp = null\n    if(crudeDeathsPerDay){\n      crudeDeathsComp = (\n        <div className=\"crude-deaths-info\">\n          ℹ️ For comparison, in 2017, <span style={{textTransform: 'capitalize', fontWeight: 800}}>{country.name}</span> was counting an average of <span style={{fontWeight: 800}}>{crudeDeathsPerDay}</span> deaths per day <a style={{color: \"#67abf3\", textDecoration: 'none'}} href=\"https://www.cia.gov/library/publications/the-world-factbook/rankorder/2066rank.html\">[source]</a>\n        </div>\n      )\n    }\n\n    let world = countryCollection.getCountry('world')\n    let countryCasesLastDay = country.getCasesStartingNDaysAgoDuringMDays(nbDayFixer, 1)\n    let countryDeathsLastDay = country.getDeathsStartingNDaysAgoDuringMDays(nbDayFixer, 1)\n    let worldCasesLastDay = world.getCasesStartingNDaysAgoDuringMDays(nbDayFixer, 1)\n    let worldDeathsLastDay = world.getDeathsStartingNDaysAgoDuringMDays(nbDayFixer, 1)\n\n\n    let casePieChartData = {\n      labels: [\n        country.name,\n        'World'\n      ],\n      datasets: [{\n        data: [\n          ~~((countryCasesLastDay / worldCasesLastDay)*1000)/1000,\n          1 - (~~((countryCasesLastDay / worldCasesLastDay)*1000)/1000)\n        ],\n        backgroundColor: [\n          '#ffc800',\n          '#f0f0f0'\n        ],\n        hoverBackgroundColor: [\n          '#edba00',\n          '#dbdbdb',\n        ],\n        borderWidth: 0\n\n      }]\n    }\n\n\n    let deathPieChartData = {\n      labels: [\n        country.name,\n        'World'\n      ],\n      datasets: [{\n        data: [\n          ~~((countryDeathsLastDay / worldDeathsLastDay)*1000)/1000,\n          1 - (~~((countryDeathsLastDay / worldDeathsLastDay)*1000)/1000)\n        ],\n        backgroundColor: [\n          '#c80000',\n          '#f0f0f0'\n        ],\n        hoverBackgroundColor: [\n          '#a30202',\n          '#f0f0f0',\n        ],\n        borderWidth: 0\n      }]\n    }\n\n\n    return (\n      <div className=\"dashboard\">\n\n        <div className=\"country-name\">\n          <img className=\"flag\" src={`images/flags/${countryCode}.svg`}/>\n          <h1>{country.name}</h1>\n        </div>\n\n\n\n        {topMessage}\n\n\n\n        <div className=\"info-grid\">\n\n          <div className=\"cell\">\n            <div className=\"cell-inner\" style={{float: 'right'}}>\n              <p>\n                <span className=\"cell-title\" style={{color: '#ffc800'}}># cases</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(all time)</span><br/>\n                <span className=\"cell-score\">{country.getCases()}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(all time per million)</span><br/>\n                <span className=\"cell-score\">{~~(country.getCasesPerMillion() * 100) / 100}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(in the last day)</span><br/>\n                <span className=\"cell-score\">{countryCasesLastDay}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(in the last 3 days)</span><br/>\n                <span className=\"cell-score\">{casesIntheLast3Days}</span>{casesEvolution}\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(world proportion in last day)</span><br/>\n                <Pie data={casePieChartData} />\n              </p>\n\n            </div>\n          </div>\n\n          <div className=\"cell\">\n            <div className=\"cell-inner\" style={{float: 'left'}}>\n              <p>\n                <span className=\"cell-title\" style={{color: '#c80000'}}># deaths</span>\n              </p>\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(all time)</span><br/>\n                <span className=\"cell-score\">{country.getDeaths()}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(all time per million)</span><br/>\n                <span className=\"cell-score\">{~~(country.getDeathsPerMillion() * 100) / 100}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(in the last day)</span><br/>\n                <span className=\"cell-score\">{countryDeathsLastDay}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(in the last 3 days)</span><br/>\n                <span className=\"cell-score\">{deathsIntheLast3Days}</span>{deathsEvolution}\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(world proportion in last day)</span><br/>\n                <Pie data={deathPieChartData} />\n              </p>\n            </div>\n          </div>\n\n\n        </div>\n\n        {crudeDeathsComp}\n\n        <div className=\"plot-title\">COVID-19 cases and deaths over time (linear scale)</div>\n        <Line data={dataRegularSeries} options={{}} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cumulated cases and deaths over time (logarithmic scale)</div>\n        <Line data={dataCumulatedSeries} options={logScale} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cases and deaths over time per million population (linear scale)</div>\n        <Line data={dataSeriesPerMillion} options={{}} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cumulated cases and deaths over time per milion population (logarithmic scale)</div>\n        <Line data={dataCumulatedSeriesPerMillion} options={logScale} height={100}/>\n\n        <div className=\"credits\">\n        <p>\n          Data from the <a href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\">European Centre for Disease Prevention and Control</a>\n        </p>\n          <p>\n          — Made by <a href=\"https://twitter.com/jonathanlurie\">@jonathanlurie</a> :: <a href=\"https://github.com/jonathanlurie/covid19dashboard\">fork me on GitHub</a> —\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n","import React from \"react\"\nimport 'chart.js'\n// import { LineChart } from 'react-chartkick'\nimport { Line, Pie } from 'react-chartjs-2'\nimport './style.css'\n\nimport { countryCollection } from '../../core/Store'\n\n\nfunction stringToColour (str) {\n  var hash = 0;\n  for (var i = 0; i < str.length; i++) {\n    hash = str.charCodeAt(i) + ((hash << 5) - hash);\n  }\n  var colour = '#';\n  for (var i = 0; i < 3; i++) {\n    var value = (hash >> (i * 8)) & 0xFF;\n    colour += ('00' + value.toString(16)).substr(-2);\n  }\n  return colour;\n}\n\nclass DashboardWorld extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n\n  }\n\n\n  render(){\n\n\n    let countryCode = 'world'\n    let country = countryCollection.getCountry(countryCode)\n    let dataAge = country.getDataAge()\n    let nbDayFixer = dataAge < 0.5 ? 0 : Math.ceil(dataAge)\n\n\n    let casesSeries = country.getCasesSeries()\n    let cumulatedCasesSeries = country.getCumulatedCasesSeries()\n    let deathsSeries = country.getDeathsSeries()\n    let cumulatedDeathsSeries = country.getCumulatedDeathsSeries()\n\n    let casesSeriesPerMillion = country.getCasesSeriesPerMillion()\n    let cumulatedCasesSeriesPerMillion = country.getCumulatedCasesSeriesPerMillion()\n    let deathsSeriesPerMillion = country.getDeathsSeriesPerMillion()\n    let cumulatedDeathsSeriesPerMillion = country.getCumulatedDeathsSeriesPerMillion()\n\n    // let countryNames = countryCollection.getCountryNames()\n    // let countryColors = countryCollection.getCountryColors()//countryNames.map(cn => stringToColour(cn))\n\n    let countryCases = countryCollection.getCountrySortedBy({\n      propToExtract: 'getCases',\n    })\n\n    let contryCasesInLastDay = countryCollection.getCountrySortedBy({\n      propToExtract: 'getCasesStartingNDaysAgoDuringMDays',\n      args: [2+nbDayFixer, 3]\n    })\n\n    let countryDeaths = countryCollection.getCountrySortedBy({\n      propToExtract: 'getDeaths',\n    })\n\n    let countryDeathsInLastDay = countryCollection.getCountrySortedBy({\n      propToExtract: 'getDeathsStartingNDaysAgoDuringMDays',\n      args: [2+nbDayFixer, 3]\n    })\n\n    let pieOptions={legend: {display: false}}\n\n    let countryCasesPieChartData = {\n      labels: countryCases.map(obj => obj.country.name),\n      datasets: [{\n        data: countryCases.map(obj => obj.value),\n        backgroundColor: countryCases.map(obj => obj.country.color),\n        borderWidth: 0\n      }]\n    }\n\n    let countryCasesLastThreeDaysPieChartData = {\n      labels: contryCasesInLastDay.map(obj => obj.country.name),\n      datasets: [{\n        data: contryCasesInLastDay.map(obj => obj.value),\n        backgroundColor: contryCasesInLastDay.map(obj => obj.country.color),\n        borderWidth: 0\n      }]\n    }\n\n\n    let countryDeathsPieChartData = {\n      labels: countryDeaths.map(obj => obj.country.name),\n      datasets: [{\n        data: countryDeaths.map(obj => obj.value),\n        backgroundColor: countryDeaths.map(obj => obj.country.color),\n        borderWidth: 0\n      }]\n    }\n\n    let countryDeathsLastThreeDaysPieChartData = {\n      labels: countryDeathsInLastDay.map(obj => obj.country.name),\n      datasets: [{\n        data: countryDeathsInLastDay.map(obj => obj.value),\n        backgroundColor: countryDeathsInLastDay.map(obj => obj.country.color),\n        borderWidth: 0\n      }]\n    }\n\n\n\n    let numberOfRecords = Object.keys(casesSeries).length\n\n    let topMessage = null\n\n    if(dataAge < 0.5){\n      topMessage = (\n        <div className=\"info-message\">\n          ✅ These numbers are fresh from the day\n        </div>\n      )\n    }else if(dataAge >= 0.5 && dataAge <= 1){\n      topMessage = (\n        <div className=\"warning-message\">\n          ⚠️ These numbers are from yesterday, they may not reflect today's reality\n        </div>\n      )\n    }else{\n      topMessage = (\n        <div className=\"warning-message\">\n          ⚠️ These numbers are from {~~dataAge} days ago, they may not reflect todays reality\n        </div>\n      )\n    }\n\n\n    // example: https://github.com/jerairrest/react-chartjs-2/blob/master/example/src/components/line.js\n    let dataRegularSeries = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cases',\n          data: Object.values(casesSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(deathsSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n\n    let dataCumulatedSeries = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cumulated cases',\n          data: Object.values(cumulatedCasesSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(cumulatedDeathsSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let dataSeriesPerMillion = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cases per million',\n          data: Object.values(casesSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths per million',\n          data: Object.values(deathsSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let dataCumulatedSeriesPerMillion = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cumulated cases',\n          data: Object.values(cumulatedCasesSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(cumulatedDeathsSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let logScale = {\n      scales: {\n        yAxes: [{\n          type: 'logarithmic',\n        }]\n      }\n    }\n\n\n\n    let casesIntheLast3Days = country.getCasesStartingNDaysAgoDuringMDays(2+nbDayFixer, 3)\n    let casesInthe3DaysBefore = country.getCasesStartingNDaysAgoDuringMDays(5+nbDayFixer, 3)\n    let casesEvolution = casesIntheLast3Days > casesInthe3DaysBefore ?\n      <img className=\"evolution-arrow\" src=\"images/arrow-red-up.png\" title=\"Higher than the 3 previous days\"/> :\n      <img className=\"evolution-arrow\" src=\"images/arrow-green-down.png\" title=\"Lower than the previous 3 days\"/>\n\n    let deathsIntheLast3Days = country.getDeathsStartingNDaysAgoDuringMDays(2+nbDayFixer, 3)\n    let deathsInthe3DaysBefore = country.getDeathsStartingNDaysAgoDuringMDays(5+nbDayFixer, 3)\n    let deathsEvolution = deathsIntheLast3Days > deathsInthe3DaysBefore ?\n      <img className=\"evolution-arrow\" src=\"images/arrow-red-up.png\" title=\"Higher than the 3 previous days\"/> :\n      <img className=\"evolution-arrow\" src=\"images/arrow-green-down.png\" title=\"Lower than the previous 3 days\"/>\n\n\n    let crudeDeathsPerDay = country.getCrudeDeathsPerDay()\n\n    let crudeDeathsComp = null\n    if(crudeDeathsPerDay){\n      crudeDeathsComp = (\n        <div className=\"crude-deaths-info\">\n          ℹ️ For comparison, in 2017, <span style={{textTransform: 'capitalize', fontWeight: 800}}>{country.name}</span> was counting an average of <span style={{fontWeight: 800}}>{crudeDeathsPerDay}</span> deaths per day <a style={{color: \"#67abf3\", textDecoration: 'none'}} href=\"https://www.cia.gov/library/publications/the-world-factbook/rankorder/2066rank.html\">[source]</a>\n        </div>\n      )\n    }\n\n    let world = countryCollection.getCountry('world')\n    let countryCasesLastDay = country.getCasesStartingNDaysAgoDuringMDays(nbDayFixer, 1)\n    let countryDeathsLastDay = country.getDeathsStartingNDaysAgoDuringMDays(nbDayFixer, 1)\n    let worldCasesLastDay = world.getCasesStartingNDaysAgoDuringMDays(nbDayFixer, 1)\n    let worldDeathsLastDay = world.getDeathsStartingNDaysAgoDuringMDays(nbDayFixer, 1)\n\n\n    return (\n      <div className=\"dashboard-world\">\n\n        <div className=\"country-name\">\n          <img className=\"flag\" src={`images/flags/${countryCode}.svg`}/>\n          <h1>{country.name}</h1>\n        </div>\n\n\n\n        {topMessage}\n\n\n\n        <div className=\"info-grid\">\n\n          <div className=\"cell\">\n            <div className=\"cell-inner\" style={{float: 'right'}}>\n              <p>\n                <span className=\"cell-title\" style={{color: '#ffc800'}}># cases</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">all time</span><br/>\n                <span className=\"cell-score\">{country.getCases()}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">all time per million</span><br/>\n                <span className=\"cell-score\">{~~(country.getCasesPerMillion() * 100) / 100}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">in the last day</span><br/>\n                <span className=\"cell-score\">{countryCasesLastDay}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">in the last 3 days</span><br/>\n                <span className=\"cell-score\">{casesIntheLast3Days}</span>{casesEvolution}\n              </p>\n\n              <p className=\"cell-section pie-section\">\n                <span className=\"cell-subtitle\">total per country</span><br/>\n                <Pie data={countryCasesPieChartData} options={pieOptions} width={100} height={100}/>\n              </p>\n\n              <p className=\"cell-section pie-section\">\n                <span className=\"cell-subtitle\">last 3 days per country</span><br/>\n                <Pie data={countryCasesLastThreeDaysPieChartData} options={pieOptions} width={100} height={100}/>\n              </p>\n\n\n            </div>\n          </div>\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n          <div className=\"cell\">\n            <div className=\"cell-inner\" style={{float: 'left'}}>\n              <p>\n                <span className=\"cell-title\" style={{color: '#c80000'}}># deaths</span>\n              </p>\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">all time</span><br/>\n                <span className=\"cell-score\">{country.getDeaths()}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">all time per million</span><br/>\n                <span className=\"cell-score\">{~~(country.getDeathsPerMillion() * 100) / 100}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">in the last day</span><br/>\n                <span className=\"cell-score\">{countryDeathsLastDay}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">in the last 3 days</span><br/>\n                <span className=\"cell-score\">{deathsIntheLast3Days}</span>{deathsEvolution}\n              </p>\n\n              <p className=\"cell-section pie-section\">\n                <span className=\"cell-subtitle\">total per country</span><br/>\n                <Pie data={countryDeathsPieChartData} options={pieOptions} width={100} height={100}/>\n              </p>\n\n              <p className=\"cell-section pie-section\">\n                <span className=\"cell-subtitle\">last 3 days per country</span><br/>\n                <Pie data={countryDeathsLastThreeDaysPieChartData} options={pieOptions} width={100} height={100}/>\n              </p>\n\n            </div>\n          </div>\n\n\n        </div>\n\n        {crudeDeathsComp}\n\n        <div className=\"plot-title\">COVID-19 cases and deaths over time (linear scale)</div>\n        <Line data={dataRegularSeries} options={{}} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cumulated cases and deaths over time (logarithmic scale)</div>\n        <Line data={dataCumulatedSeries} options={logScale} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cases and deaths over time per million population (linear scale)</div>\n        <Line data={dataSeriesPerMillion} options={{}} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cumulated cases and deaths over time per milion population (logarithmic scale)</div>\n        <Line data={dataCumulatedSeriesPerMillion} options={logScale} height={100}/>\n\n        <div className=\"credits\">\n        <p>\n          Data from the <a href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\">European Centre for Disease Prevention and Control</a>\n        </p>\n          <p>\n          — Made by <a href=\"https://twitter.com/jonathanlurie\">@jonathanlurie</a> :: <a href=\"https://github.com/jonathanlurie/covid19dashboard\">fork me on GitHub</a> —\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default DashboardWorld\n","import React from 'react'\nimport {\n  Link\n} from \"react-router-dom\";\nimport { countryCollection } from '../../core/Store'\nimport './style.css'\n\nclass CountryList extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      countrySearch: ''\n    }\n\n    this.fullCountryList = countryCollection.getAllCountries()\n  }\n\n  render(){\n\n    let countries = this.fullCountryList\n\n    if(this.state.countrySearch !== ''){\n      countries = countries.filter(c => {\n        return c.name.includes(this.state.countrySearch)\n      })\n    }\n\n    let countryList = countries.map(c => {\n      let flagPath = `images/flags/${c.code}.svg`\n      return (\n        <li key={c.code}>\n        <img className=\"flag\" src={flagPath}/>\n        <span className=\"country-name\"><Link to={c.code}>{c.name}</Link></span>\n\n        </li>\n      )\n    })\n\n    return (\n      <div className=\"country-list\">\n        <div className=\"title\">\n          COVID-19<br/>\n          dashboard\n        </div>\n        <div className=\"container\">\n          <input className=\"searchbar\" placeholder=\"Type a country...\" onChange={(e) => {this.setState({countrySearch: e.target.value.toLowerCase()})}}/>\n          <ul>\n            {countryList}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default CountryList\n","import React from \"react\"\nimport {\n  Redirect\n} from \"react-router-dom\"\nimport { countryCollection, config } from '../../core/Store'\nimport Dashboard from '../Dashboard'\nimport DashboardWorld from '../DashboardWorld'\nimport CountryList from '../CountryList'\nimport './style.css'\n\nclass Main extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n  }\n\n  render(){\n    // let { countryCode } = useParams()\n    let countryCode = this.props.match.params.countryCode\n\n    if(!countryCode){\n      return <Redirect to={config.defaultCountryCode} />\n    }\n\n    let hasCountry = countryCollection.hasCountry(countryCode)\n\n    if(!hasCountry){\n      alert('There is no data for this country.')\n    }\n\n    let dashboardComp = countryCode === 'world' ? <DashboardWorld /> : <Dashboard countryCode={countryCode}/>\n\n\n    return (\n      <div className=\"main\">\n        <CountryList />\n        {dashboardComp}\n      </div>\n    )\n  }\n}\n\nexport default Main\n","import React from \"react\";\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Main from './views/Main'\n\nexport default function ParamsExample() {\n  return (\n    <HashRouter>\n        <Switch>\n          <Route path=\"/:countryCode\" component={Main} />\n          <Route path=\"/\" component={Main} />\n        </Switch>\n    </HashRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport loadData from './core/loadData'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nasync function init(){\n  // first; lets fetch data\n  console.log('loading data...');\n  await loadData()\n  console.log('done loading data')\n\n  ReactDOM.render(<App />, document.getElementById('root'))\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  // serviceWorker.unregister()\n}\n\ninit()\n"],"sourceRoot":""}