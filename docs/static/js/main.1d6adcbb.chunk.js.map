{"version":3,"sources":["core/Country.js","core/Store.js","core/CountryCollection.js","core/loadData.js","views/Dashboard/index.js","views/CountryList/index.js","views/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Country","code","name","this","recordSeries","population","rs","i","length","date","Date","total","cases","deaths","getCases","getDeaths","n","m","nDaysAgo","now","setUTCHours","mDaysAfter","getTime","console","log","toUTCString","r","series","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","countryCollection","collection","c","toLowerCase","Object","values","sort","a","b","config","defaultCountryCode","fetchLocalCountryCode","fetch","geoRes","json","geo","geoplugin_countryCode","countryByAbreviationRes","countryByAbreviation","countryPopulationRes","countryPopulation","countryPopulationMap","forEach","country","parseInt","covid19Res","covid19","configRes","lastFile","countryName","countryAbbr","abbreviation","toUpperCase","setRecordSeries","addCountry","loadData","Dashboard","props","state","countryCode","getCountry","casesSeries","getCasesSeries","cumulatedCasesSeries","getCumulatedCasesSeries","deathsSeries","getDeathsSeries","cumulatedDeathsSeries","getCumulatedDeathsSeries","casesSeriesPerMillion","getCasesSeriesPerMillion","cumulatedCasesSeriesPerMillion","getCumulatedCasesSeriesPerMillion","deathsSeriesPerMillion","getDeathsSeriesPerMillion","cumulatedDeathsSeriesPerMillion","getCumulatedDeathsSeriesPerMillion","dataRegularSeries","labels","keys","datasets","label","data","fill","pointRadius","pointHitRadius","borderColor","lineTension","backgroundColor","dataCumulatedSeries","dataSeriesPerMillion","dataCumulatedSeriesPerMillion","logScale","scales","yAxes","type","className","src","options","height","href","React","Component","CountryList","countrySearch","fullCountryList","getAllCountries","countries","filter","includes","countryList","map","flagPath","key","to","placeholder","onChange","e","setState","target","value","Main","match","params","hasCountry","alert","ParamsExample","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","init"],"mappings":"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","file":"static/js/main.1d6adcbb.chunk.js","sourcesContent":["const MILLION = 1000000\n\nclass Country {\n\n  constructor(code, name){\n    this.code = code\n    this.name = name\n    this.recordSeries = []\n    this.population = null\n  }\n\n  setRecordSeries(rs){\n    this.recordSeries = rs\n    // making actual date objects\n    for(let i=0; i<this.recordSeries.length; i++){\n      this.recordSeries[i].date = new Date(this.recordSeries[i].date)\n    }\n  }\n\n  getCases(){\n    let total = 0\n    for(let i=0; i<this.recordSeries.length; i++){\n      total += this.recordSeries[i].cases\n    }\n    return total\n  }\n\n  getDeaths(){\n    let total = 0\n    for(let i=0; i<this.recordSeries.length; i++){\n      total += this.recordSeries[i].deaths\n    }\n    return total\n  }\n\n  getCasesPerMillion(){\n    return this.getCases() / (this.population / MILLION)\n  }\n\n  getDeathsPerMillion(){\n    return this.getDeaths() / (this.population / MILLION)\n  }\n\n\n\n  // n days ago start n days ago very early at the morning (1 sec after midnight)\n  // and n days after is also  very early at the morning (1 sec after midnight)\n  // example: \"today\" is n=0 m=1\n  //          \"yesterday\" is n=1 m=1\n  //          \"since yesterday morning\" is n=1 m=2\n  getCasesStartingNDaysAgoDuringMDays(n, m){\n    let nDaysAgo = new Date(Date.now() - n * 1000 * 3600 * 24)\n    // set it to UTC early morning (1 sec after midnight)\n    nDaysAgo.setUTCHours(0, 0, 1, 0)\n    let mDaysAfter = new Date(nDaysAgo.getTime() + m * 1000 * 3600 * 24)\n    // mDaysAfter.setUTCHours(23, 59, 59, 0)\n\n    console.log('nDaysAgo', nDaysAgo.toUTCString())\n    console.log('mDaysAfter', mDaysAfter.toUTCString())\n\n    let total = 0\n    for(let i=this.recordSeries.length - 1; i>=0; i--){\n      let r = this.recordSeries[i]\n      if(r.date > nDaysAgo && r.date < mDaysAfter){\n        total += r.cases\n      }\n    }\n    return total\n  }\n\n\n    // n days ago start n days ago very early at the morning (1 sec after midnight)\n    // and n days after is also  very early at the morning (1 sec after midnight)\n    getDeathsStartingNDaysAgoDuringMDays(n, m){\n      let nDaysAgo = new Date(Date.now() - n * 1000 * 3600 * 24)\n      // set it to UTC early morning (1 sec after midnight)\n      nDaysAgo.setUTCHours(0, 0, 1, 0)\n      let mDaysAfter = new Date(nDaysAgo.getTime() + m * 1000 * 3600 * 24)\n      // mDaysAfter.setUTCHours(23, 59, 59, 0)\n\n      console.log('nDaysAgo', nDaysAgo.toUTCString())\n      console.log('mDaysAfter', mDaysAfter.toUTCString())\n\n      let total = 0\n      for(let i=this.recordSeries.length - 1; i>=0; i--){\n        let r = this.recordSeries[i]\n        if(r.date > nDaysAgo && r.date < mDaysAfter){\n          total += r.deaths\n        }\n      }\n      return total\n    }\n\n    getCasesSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.cases\n      }\n      return series\n    }\n\n    getCasesSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.cases / (this.population / MILLION)\n      }\n      return series\n    }\n\n\n    getCumulatedCasesSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.cases\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total\n      }\n      return series\n    }\n\n\n    getCumulatedCasesSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.cases\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total / (this.population / MILLION)\n      }\n      return series\n    }\n\n\n    getDeathsSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.deaths\n      }\n      return series\n    }\n\n    getDeathsSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.deaths / (this.population / MILLION)\n      }\n      return series\n    }\n\n    getCumulatedDeathsSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.deaths\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total\n      }\n      return series\n    }\n\n    getCumulatedDeathsSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.deaths\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total / (this.population / MILLION)\n      }\n      return series\n    }\n\n\n\n\n  // TODO:\n  // - same but per million\n  // - getDeathsSeries and getCasesSeries CUMULATED\n\n\n}\n\nexport default Country\n","import CountryCollection from './CountryCollection'\n\nconst countryCollection = new CountryCollection()\nconst config = {\n  defaultCountryCode: 'ch'\n}\n\nexport {\n  countryCollection,\n  config\n}\n","class CountryCollection {\n\n  constructor(){\n    this.collection = {}\n  }\n\n  addCountry(c){\n    this.collection[c.code] = c\n  }\n\n  getCountry(code){\n    if(code in this.collection){\n      return this.collection[code]\n    }else{\n      return null\n    }\n  }\n\n  hasCountry(code){\n    return (code.toLowerCase() in this.collection)\n  }\n\n  getAllCountries(){\n    let countries = Object.values(this.collection)\n    let sorted = countries.sort((a, b) => a.name < b.name ? -1 : 1)\n    return sorted\n  }\n}\n\n\nexport default CountryCollection\n","import Country from './Country'\nimport { countryCollection, config } from './Store'\n\nasync function fetchLocalCountryCode(){\n  try{\n    let geoRes = await fetch('http://www.geoplugin.net/json.gp')\n    let geo = await geoRes.json()\n    config.defaultCountryCode = geo.geoplugin_countryCode.toLowerCase()\n  }catch(e){\n    console.log(e)\n  }\n}\n\n\nasync function loadData(){\n  await fetchLocalCountryCode()\n\n\n  // loading country names and abbreviations\n  let countryByAbreviationRes = await fetch('./data/country-by-abbreviation.json')\n  let countryByAbreviation = await countryByAbreviationRes.json()\n\n  // load population\n  let countryPopulationRes = await fetch('./data/country-by-population.json')\n  let countryPopulation = await countryPopulationRes.json()\n  let countryPopulationMap = {}\n  countryPopulation.forEach(c => {\n    countryPopulationMap[c.country.toLowerCase()] = parseInt(c.population) || null\n  })\n\n  // load covid-19 cases\n  let date = new Date()\n  let day = date.getUTCDate()\n  day = day < 10 ? `0${day}` : `${day}`\n  let month = date.getUTCMonth() + 1\n  month = month < 10 ? `0${month}` : `${month}`\n  let year = `${date.getUTCFullYear()}`\n  let covid19Res = null\n  let covid19 = null\n  try{\n    covid19Res = await fetch(`./data/covid19-per-country-${day}-${month}-${year}.json`)\n    covid19 = await covid19Res.json()\n  }catch(e){\n    console.log('Fallback on the last report available')\n    let configRes = await fetch('./data/config.json')\n    let config = await configRes.json()\n    covid19Res = await fetch(`./data/${config.lastFile}`)\n    covid19 =  await covid19Res.json()\n  }\n\n  for(let c=0; c<countryByAbreviation.length; c++){\n    let countryName = countryByAbreviation[c].country.toLowerCase()\n    let countryAbbr = countryByAbreviation[c].abbreviation.toLowerCase()\n    let population = countryPopulationMap[countryName]\n\n    let country = new Country(countryAbbr, countryName)\n    country.population = population\n\n    if(countryAbbr.toUpperCase() in covid19){\n      country.setRecordSeries(covid19[countryAbbr.toUpperCase()])\n    }\n\n    countryCollection.addCountry(country)\n  }\n\n}\n\nexport default loadData\n","import React from \"react\"\nimport 'chart.js'\n// import { LineChart } from 'react-chartkick'\nimport { Line } from 'react-chartjs-2'\nimport './style.css'\n\nimport { countryCollection } from '../../core/Store'\n\n\nclass Dashboard extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n  }\n\n  render(){\n    let countryCode = this.props.countryCode\n    let country = countryCollection.getCountry(countryCode)\n\n\n    let casesSeries = country.getCasesSeries()\n    let cumulatedCasesSeries = country.getCumulatedCasesSeries()\n    let deathsSeries = country.getDeathsSeries()\n    let cumulatedDeathsSeries = country.getCumulatedDeathsSeries()\n\n    let casesSeriesPerMillion = country.getCasesSeriesPerMillion()\n    let cumulatedCasesSeriesPerMillion = country.getCumulatedCasesSeriesPerMillion()\n    let deathsSeriesPerMillion = country.getDeathsSeriesPerMillion()\n    let cumulatedDeathsSeriesPerMillion = country.getCumulatedDeathsSeriesPerMillion()\n\n\n    // example: https://github.com/jerairrest/react-chartjs-2/blob/master/example/src/components/line.js\n    let dataRegularSeries = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cases',\n          data: Object.values(casesSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(deathsSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n\n    let dataCumulatedSeries = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cumulated cases',\n          data: Object.values(cumulatedCasesSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(cumulatedDeathsSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let dataSeriesPerMillion = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cases per million',\n          data: Object.values(casesSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths per million',\n          data: Object.values(deathsSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let dataCumulatedSeriesPerMillion = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cumulated cases',\n          data: Object.values(cumulatedCasesSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(cumulatedDeathsSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let logScale = {\n      scales: {\n        yAxes: [{\n          type: 'logarithmic',\n        }]\n      }\n    }\n\n    return (\n      <div className=\"dashboard\">\n\n        <div className=\"country-name\">\n          <img className=\"flag\" src={`images/flags/${countryCode}.svg`}/>\n          <h1>{country.name}</h1>\n        </div>\n\n        <div className=\"plot-title\">COVID-19 cases and deaths over time (linear scale)</div>\n        <Line data={dataRegularSeries} options={{}} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cumulated cases and deaths over time (logarithmic scale)</div>\n        <Line data={dataCumulatedSeries} options={logScale} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cases and deaths over time per million population (linear scale)</div>\n        <Line data={dataSeriesPerMillion} options={{}} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cumulated cases and deaths over time per milion poplation (logarithmic scale)</div>\n        <Line data={dataCumulatedSeriesPerMillion} options={logScale} height={100}/>\n\n        <div className=\"credits\">\n        <p>\n          Data from the <a href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\">European Centre for Disease Prevention and Control</a>\n        </p>\n          <p>\n          — Made by <a href=\"https://twitter.com/jonathanlurie\">@jonathanlurie</a> :: <a href=\"https://github.com/jonathanlurie/covid19dashboard\">fork me on GitHub</a> —\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n","import React from 'react'\nimport {\n  Link\n} from \"react-router-dom\";\nimport { countryCollection } from '../../core/Store'\nimport './style.css'\n\nclass CountryList extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      countrySearch: ''\n    }\n\n    this.fullCountryList = countryCollection.getAllCountries()\n  }\n\n  render(){\n\n    let countries = this.fullCountryList\n\n    if(this.state.countrySearch !== ''){\n      countries = countries.filter(c => {\n        return c.name.includes(this.state.countrySearch)\n      })\n    }\n\n    let countryList = countries.map(c => {\n      let flagPath = `images/flags/${c.code}.svg`\n      return (\n        <li key={c.code}>\n        <img className=\"flag\" src={flagPath}/>\n        <span className=\"country-name\"><Link to={c.code}>{c.name}</Link></span>\n\n        </li>\n      )\n    })\n\n    return (\n      <div className=\"country-list\">\n        <div className=\"title\">\n          COVID-19<br/>\n          dashboard\n        </div>\n        <div className=\"container\">\n          <input className=\"searchbar\" placeholder=\"Type a country...\" onChange={(e) => {this.setState({countrySearch: e.target.value})}}/>\n          <ul>\n            {countryList}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default CountryList\n","import React from \"react\"\nimport {\n  Redirect\n} from \"react-router-dom\"\nimport { countryCollection, config } from '../../core/Store'\nimport Dashboard from '../Dashboard'\nimport CountryList from '../CountryList'\nimport './style.css'\n\nclass Main extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n  }\n\n  render(){\n    // let { countryCode } = useParams()\n    let countryCode = this.props.match.params.countryCode\n\n    if(!countryCode){\n      return <Redirect to={config.defaultCountryCode} />\n    }\n\n    let hasCountry = countryCollection.hasCountry(countryCode)\n\n    if(!hasCountry){\n      alert('There is no data for this country.')\n    }\n\n\n    return (\n      <div className=\"main\">\n        <CountryList />\n        <Dashboard countryCode={countryCode}/>\n      </div>\n    )\n  }\n}\n\nexport default Main\n","import React from \"react\";\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Main from './views/Main'\n\nexport default function ParamsExample() {\n  return (\n    <HashRouter>\n        <Switch>\n          <Route path=\"/:countryCode\" component={Main} />\n          <Route path=\"/\" component={Main} />\n        </Switch>\n    </HashRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport loadData from './core/loadData'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nasync function init(){\n  // first; lets fetch data\n  console.log('loading data...');\n  await loadData()\n  console.log('done loading data')\n\n  ReactDOM.render(<App />, document.getElementById('root'))\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  // serviceWorker.unregister()\n}\n\ninit()\n"],"sourceRoot":""}