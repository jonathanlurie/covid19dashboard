{"version":3,"sources":["core/Country.js","core/Store.js","core/CountryCollection.js","core/loadData.js","views/Dashboard/index.js","views/CountryList/index.js","views/Main/index.js","App.js","serviceWorker.js","index.js"],"names":["Country","code","name","this","recordSeries","population","rs","i","length","date","Date","total","cases","deaths","getCases","getDeaths","lastRecordDate","todayAtNoon","setUTCHours","n","m","nDaysAgo","now","mDaysAfter","getTime","r","series","year","getUTCFullYear","month","getUTCMonth","day","getUTCDate","countryCollection","collection","c","toLowerCase","Object","values","sort","a","b","config","defaultCountryCode","fetchLocalCountryCode","fetch","geoRes","json","geo","geoplugin_countryCode","console","log","countryByAbreviationRes","countryByAbreviation","countryPopulationRes","countryPopulation","countryPopulationMap","forEach","country","parseInt","covid19Res","covid19","configRes","lastFile","countryName","countryAbbr","abbreviation","toUpperCase","setRecordSeries","addCountry","loadData","Dashboard","props","state","countryCode","getCountry","casesSeries","getCasesSeries","cumulatedCasesSeries","getCumulatedCasesSeries","deathsSeries","getDeathsSeries","cumulatedDeathsSeries","getCumulatedDeathsSeries","casesSeriesPerMillion","getCasesSeriesPerMillion","cumulatedCasesSeriesPerMillion","getCumulatedCasesSeriesPerMillion","deathsSeriesPerMillion","getDeathsSeriesPerMillion","cumulatedDeathsSeriesPerMillion","getCumulatedDeathsSeriesPerMillion","topMessage","keys","className","dataAge","getDataAge","dataRegularSeries","labels","datasets","label","data","fill","pointRadius","pointHitRadius","borderColor","lineTension","backgroundColor","dataCumulatedSeries","dataSeriesPerMillion","dataCumulatedSeriesPerMillion","logScale","scales","yAxes","type","casesIntheLast3Days","getCasesStartingNDaysAgoDuringMDays","casesEvolution","src","title","deathsIntheLast3Days","getDeathsStartingNDaysAgoDuringMDays","deathsEvolution","style","float","color","getCasesPerMillion","getDeathsPerMillion","options","height","href","React","Component","CountryList","countrySearch","fullCountryList","getAllCountries","countries","filter","includes","countryList","map","flagPath","key","to","placeholder","onChange","e","setState","target","value","Main","match","params","hasCountry","alert","ParamsExample","path","component","Boolean","window","location","hostname","ReactDOM","render","document","getElementById","init"],"mappings":"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","file":"static/js/main.9725ea64.chunk.js","sourcesContent":["const MILLION = 1000000\n\nclass Country {\n\n  constructor(code, name){\n    this.code = code\n    this.name = name\n    this.recordSeries = []\n    this.population = null\n  }\n\n\n  setRecordSeries(rs){\n    this.recordSeries = rs\n    // making actual date objects\n    for(let i=0; i<this.recordSeries.length; i++){\n      this.recordSeries[i].date = new Date(this.recordSeries[i].date)\n    }\n  }\n\n\n  getCases(){\n    let total = 0\n    for(let i=0; i<this.recordSeries.length; i++){\n      total += this.recordSeries[i].cases\n    }\n    return total\n  }\n\n\n  getDeaths(){\n    let total = 0\n    for(let i=0; i<this.recordSeries.length; i++){\n      total += this.recordSeries[i].deaths\n    }\n    return total\n  }\n\n\n  getCasesPerMillion(){\n    return this.getCases() / (this.population / MILLION)\n  }\n\n\n  getDeathsPerMillion(){\n    return this.getDeaths() / (this.population / MILLION)\n  }\n\n\n  // chec\n  // k if the last date available corresponds to the\n  getDataAge(){\n    let lastRecordDate = this.recordSeries[this.recordSeries.length - 1].date\n    let todayAtNoon = new Date()\n    todayAtNoon.setUTCHours(12, 0, 0, 0)\n    let deltaDays = (todayAtNoon - lastRecordDate) / (24 * 3600 * 1000)\n    return deltaDays\n  }\n\n\n\n  // n days ago start n days ago very early at the morning (1 sec after midnight)\n  // and n days after is also  very early at the morning (1 sec after midnight)\n  // example: \"today\" is n=0 m=1\n  //          \"yesterday\" is n=1 m=1\n  //          \"since yesterday morning\" is n=1 m=2\n  getCasesStartingNDaysAgoDuringMDays(n, m){\n    let nDaysAgo = new Date(Date.now() - n * 1000 * 3600 * 24)\n    // set it to UTC early morning (1 sec after midnight)\n    nDaysAgo.setUTCHours(0, 0, 1, 0)\n    let mDaysAfter = new Date(nDaysAgo.getTime() + m * 1000 * 3600 * 24)\n    // mDaysAfter.setUTCHours(23, 59, 59, 0)\n\n    let total = 0\n    for(let i=this.recordSeries.length - 1; i>=0; i--){\n      let r = this.recordSeries[i]\n      if(r.date > nDaysAgo && r.date < mDaysAfter){\n        total += r.cases\n      }\n    }\n    return total\n  }\n\n\n    // n days ago start n days ago very early at the morning (1 sec after midnight)\n    // and n days after is also  very early at the morning (1 sec after midnight)\n    getDeathsStartingNDaysAgoDuringMDays(n, m){\n      let nDaysAgo = new Date(Date.now() - n * 1000 * 3600 * 24)\n      // set it to UTC early morning (1 sec after midnight)\n      nDaysAgo.setUTCHours(0, 0, 1, 0)\n      let mDaysAfter = new Date(nDaysAgo.getTime() + m * 1000 * 3600 * 24)\n      // mDaysAfter.setUTCHours(23, 59, 59, 0)\n\n      let total = 0\n      for(let i=this.recordSeries.length - 1; i>=0; i--){\n        let r = this.recordSeries[i]\n        if(r.date > nDaysAgo && r.date < mDaysAfter){\n          total += r.deaths\n        }\n      }\n      return total\n    }\n\n    getCasesSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.cases\n      }\n      return series\n    }\n\n    getCasesSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.cases / (this.population / MILLION)\n      }\n      return series\n    }\n\n\n    getCumulatedCasesSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.cases\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total\n      }\n      return series\n    }\n\n\n    getCumulatedCasesSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.cases\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total / (this.population / MILLION)\n      }\n      return series\n    }\n\n\n    getDeathsSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.deaths\n      }\n      return series\n    }\n\n    getDeathsSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = r.deaths / (this.population / MILLION)\n      }\n      return series\n    }\n\n    getCumulatedDeathsSeries(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.deaths\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total\n      }\n      return series\n    }\n\n    getCumulatedDeathsSeriesPerMillion(){\n      // key is date such as yyyy-mm-dd\n      let series = {}\n      let total = 0\n\n      for(let i=0; i<this.recordSeries.length; i++){\n        let r = this.recordSeries[i]\n        total += r.deaths\n        let year = r.date.getUTCFullYear()\n        let month = r.date.getUTCMonth() + 1\n        month = month < 10 ? `0${month}` : month\n        let day = r.date.getUTCDate()\n        day = day < 10 ? `0${day}` : day\n        let key = `${year}-${month}-${day}`\n        series[key] = total / (this.population / MILLION)\n      }\n      return series\n    }\n\n\n\n\n  // TODO:\n  // - same but per million\n  // - getDeathsSeries and getCasesSeries CUMULATED\n\n\n}\n\nexport default Country\n","import CountryCollection from './CountryCollection'\n\nconst countryCollection = new CountryCollection()\nconst config = {\n  defaultCountryCode: 'ch'\n}\n\nexport {\n  countryCollection,\n  config\n}\n","class CountryCollection {\n\n  constructor(){\n    this.collection = {}\n  }\n\n  addCountry(c){\n    this.collection[c.code] = c\n  }\n\n  getCountry(code){\n    if(code in this.collection){\n      return this.collection[code]\n    }else{\n      return null\n    }\n  }\n\n  hasCountry(code){\n    return (code.toLowerCase() in this.collection)\n  }\n\n  getAllCountries(){\n    let countries = Object.values(this.collection)\n    let sorted = countries.sort((a, b) => a.name < b.name ? -1 : 1)\n    return sorted\n  }\n}\n\n\nexport default CountryCollection\n","import Country from './Country'\nimport { countryCollection, config } from './Store'\n\nasync function fetchLocalCountryCode(){\n  try{\n    let geoRes = await fetch('http://www.geoplugin.net/json.gp')\n    let geo = await geoRes.json()\n    config.defaultCountryCode = geo.geoplugin_countryCode.toLowerCase()\n  }catch(e){\n    console.log(e)\n  }\n}\n\n\nasync function loadData(){\n  await fetchLocalCountryCode()\n\n\n  // loading country names and abbreviations\n  let countryByAbreviationRes = await fetch('./data/country-by-abbreviation.json')\n  let countryByAbreviation = await countryByAbreviationRes.json()\n\n  // load population\n  let countryPopulationRes = await fetch('./data/country-by-population.json')\n  let countryPopulation = await countryPopulationRes.json()\n  let countryPopulationMap = {}\n  countryPopulation.forEach(c => {\n    countryPopulationMap[c.country.toLowerCase()] = parseInt(c.population) || null\n  })\n\n  // load covid-19 cases\n  let date = new Date()\n  let day = date.getUTCDate()\n  day = day < 10 ? `0${day}` : `${day}`\n  let month = date.getUTCMonth() + 1\n  month = month < 10 ? `0${month}` : `${month}`\n  let year = `${date.getUTCFullYear()}`\n  let covid19Res = null\n  let covid19 = null\n  try{\n    covid19Res = await fetch(`./data/covid19-per-country-${day}-${month}-${year}.json`)\n    covid19 = await covid19Res.json()\n  }catch(e){\n    console.log('Fallback on the last report available')\n    let configRes = await fetch('./data/config.json')\n    let config = await configRes.json()\n    covid19Res = await fetch(`./data/${config.lastFile}`)\n    covid19 =  await covid19Res.json()\n  }\n\n  for(let c=0; c<countryByAbreviation.length; c++){\n    let countryName = countryByAbreviation[c].country.toLowerCase()\n    let countryAbbr = countryByAbreviation[c].abbreviation.toLowerCase()\n    let population = countryPopulationMap[countryName]\n\n    let country = new Country(countryAbbr, countryName)\n    country.population = population\n\n    if(countryAbbr.toUpperCase() in covid19){\n      country.setRecordSeries(covid19[countryAbbr.toUpperCase()])\n    }\n\n    countryCollection.addCountry(country)\n  }\n\n}\n\nexport default loadData\n","import React from \"react\"\nimport 'chart.js'\n// import { LineChart } from 'react-chartkick'\nimport { Line } from 'react-chartjs-2'\nimport './style.css'\n\nimport { countryCollection } from '../../core/Store'\n\n\nclass Dashboard extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n\n  }\n\n\n  render(){\n    let countryCode = this.props.countryCode\n    let country = countryCollection.getCountry(countryCode)\n\n\n    let casesSeries = country.getCasesSeries()\n    let cumulatedCasesSeries = country.getCumulatedCasesSeries()\n    let deathsSeries = country.getDeathsSeries()\n    let cumulatedDeathsSeries = country.getCumulatedDeathsSeries()\n\n    let casesSeriesPerMillion = country.getCasesSeriesPerMillion()\n    let cumulatedCasesSeriesPerMillion = country.getCumulatedCasesSeriesPerMillion()\n    let deathsSeriesPerMillion = country.getDeathsSeriesPerMillion()\n    let cumulatedDeathsSeriesPerMillion = country.getCumulatedDeathsSeriesPerMillion()\n\n    let numberOfRecords = Object.keys(casesSeries).length\n\n    let topMessage = null\n\n    if(numberOfRecords === 0){\n      topMessage = (\n        <div className=\"warning-message\">\n          ⚠️ There is no record for this country\n        </div>\n      )\n    }else{\n      let dataAge = country.getDataAge()\n      console.log('dataAge', dataAge)\n\n      if(dataAge < 0.5){\n        topMessage = (\n          <div className=\"info-message\">\n            ✅ These numbers are fresh from the day\n          </div>\n        )\n      }else if(dataAge >= 0.5 && dataAge <= 1){\n        topMessage = (\n          <div className=\"warning-message\">\n            ⚠️ These numbers are from yesterday, they may not reflect today's reality\n          </div>\n        )\n      }else{\n        topMessage = (\n          <div className=\"warning-message\">\n            ⚠️ These numbers are from {~~dataAge} days ago, they may not reflect todays reality\n          </div>\n        )\n      }\n    }\n\n    // example: https://github.com/jerairrest/react-chartjs-2/blob/master/example/src/components/line.js\n    let dataRegularSeries = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cases',\n          data: Object.values(casesSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(deathsSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n\n    let dataCumulatedSeries = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cumulated cases',\n          data: Object.values(cumulatedCasesSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(cumulatedDeathsSeries),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let dataSeriesPerMillion = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cases per million',\n          data: Object.values(casesSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths per million',\n          data: Object.values(deathsSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let dataCumulatedSeriesPerMillion = {\n      labels: Object.keys(casesSeries),\n      datasets: [\n        {\n          label: 'COVID-19 cumulated cases',\n          data: Object.values(cumulatedCasesSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(255, 200, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(255, 200, 0, 1)',\n        },\n        {\n          label: 'COVID-19 deaths',\n          data: Object.values(cumulatedDeathsSeriesPerMillion),\n          fill: false,\n          pointRadius: 1.7,\n          pointHitRadius: 10,\n          borderColor: 'rgba(200, 0, 0, 1)',\n          lineTension: 0.2,\n          backgroundColor: 'rgba(200, 0, 0, 1)',\n        }\n      ]\n    }\n\n\n    let logScale = {\n      scales: {\n        yAxes: [{\n          type: 'logarithmic',\n        }]\n      }\n    }\n\n    let casesIntheLast3Days = country.getCasesStartingNDaysAgoDuringMDays(2, 3)\n    let casesInthe3DaysBefore = country.getCasesStartingNDaysAgoDuringMDays(5, 3)\n    let casesEvolution = casesIntheLast3Days > casesInthe3DaysBefore ?\n      <img className=\"evolution-arrow\" src=\"images/arrow-red-up.png\" title=\"Higher than the 3 previous days\"/> :\n      <img className=\"evolution-arrow\" src=\"images/arrow-green-down.png\" title=\"Lower than the previous 3 days\"/>\n\n    let deathsIntheLast3Days = country.getDeathsStartingNDaysAgoDuringMDays(2, 3)\n    let deathsInthe3DaysBefore = country.getDeathsStartingNDaysAgoDuringMDays(5, 3)\n    let deathsEvolution = deathsIntheLast3Days > deathsInthe3DaysBefore ?\n      <img className=\"evolution-arrow\" src=\"images/arrow-red-up.png\" title=\"Higher than the 3 previous days\"/> :\n      <img className=\"evolution-arrow\" src=\"images/arrow-green-down.png\" title=\"Lower than the previous 3 days\"/>\n\n\n    return (\n      <div className=\"dashboard\">\n\n        <div className=\"country-name\">\n          <img className=\"flag\" src={`images/flags/${countryCode}.svg`}/>\n          <h1>{country.name}</h1>\n        </div>\n\n\n\n        {topMessage}\n\n\n\n        <div className=\"info-grid\">\n\n          <div className=\"cell\">\n            <div className=\"cell-inner\" style={{float: 'right'}}>\n              <p>\n                <span className=\"cell-title\" style={{color: '#ffc800'}}># cases</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(all time)</span><br/>\n                <span className=\"cell-score\">{country.getCases()}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(all time per million)</span><br/>\n                <span className=\"cell-score\">{~~(country.getCasesPerMillion() * 100) / 100}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(in the last day)</span><br/>\n                <span className=\"cell-score\">{country.getCasesStartingNDaysAgoDuringMDays(0, 1)}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(in the last 3 days)</span><br/>\n                <span className=\"cell-score\">{casesIntheLast3Days}</span>{casesEvolution}\n              </p>\n\n            </div>\n          </div>\n\n          <div className=\"cell\">\n            <div className=\"cell-inner\" style={{float: 'left'}}>\n              <p>\n                <span className=\"cell-title\" style={{color: '#c80000'}}># deaths</span>\n              </p>\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(all time)</span><br/>\n                <span className=\"cell-score\">{country.getDeaths()}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(all time per million)</span><br/>\n                <span className=\"cell-score\">{~~(country.getDeathsPerMillion() * 100) / 100}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(in the last day)</span><br/>\n                <span className=\"cell-score\">{country.getDeathsStartingNDaysAgoDuringMDays(0, 1)}</span>\n              </p>\n\n              <p className=\"cell-section\">\n                <span className=\"cell-subtitle\">(in the last 3 days)</span><br/>\n                <span className=\"cell-score\">{deathsIntheLast3Days}</span>{deathsEvolution}\n              </p>\n            </div>\n          </div>\n\n\n        </div>\n\n        <div className=\"plot-title\">COVID-19 cases and deaths over time (linear scale)</div>\n        <Line data={dataRegularSeries} options={{}} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cumulated cases and deaths over time (logarithmic scale)</div>\n        <Line data={dataCumulatedSeries} options={logScale} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cases and deaths over time per million population (linear scale)</div>\n        <Line data={dataSeriesPerMillion} options={{}} height={100}/>\n\n        <div className=\"plot-title\">COVID-19 cumulated cases and deaths over time per milion population (logarithmic scale)</div>\n        <Line data={dataCumulatedSeriesPerMillion} options={logScale} height={100}/>\n\n        <div className=\"credits\">\n        <p>\n          Data from the <a href=\"https://www.ecdc.europa.eu/en/publications-data/download-todays-data-geographic-distribution-covid-19-cases-worldwide\">European Centre for Disease Prevention and Control</a>\n        </p>\n          <p>\n          — Made by <a href=\"https://twitter.com/jonathanlurie\">@jonathanlurie</a> :: <a href=\"https://github.com/jonathanlurie/covid19dashboard\">fork me on GitHub</a> —\n          </p>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default Dashboard\n","import React from 'react'\nimport {\n  Link\n} from \"react-router-dom\";\nimport { countryCollection } from '../../core/Store'\nimport './style.css'\n\nclass CountryList extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      countrySearch: ''\n    }\n\n    this.fullCountryList = countryCollection.getAllCountries()\n  }\n\n  render(){\n\n    let countries = this.fullCountryList\n\n    if(this.state.countrySearch !== ''){\n      countries = countries.filter(c => {\n        return c.name.includes(this.state.countrySearch)\n      })\n    }\n\n    let countryList = countries.map(c => {\n      let flagPath = `images/flags/${c.code}.svg`\n      return (\n        <li key={c.code}>\n        <img className=\"flag\" src={flagPath}/>\n        <span className=\"country-name\"><Link to={c.code}>{c.name}</Link></span>\n\n        </li>\n      )\n    })\n\n    return (\n      <div className=\"country-list\">\n        <div className=\"title\">\n          COVID-19<br/>\n          dashboard\n        </div>\n        <div className=\"container\">\n          <input className=\"searchbar\" placeholder=\"Type a country...\" onChange={(e) => {this.setState({countrySearch: e.target.value})}}/>\n          <ul>\n            {countryList}\n          </ul>\n        </div>\n      </div>\n    )\n  }\n}\n\nexport default CountryList\n","import React from \"react\"\nimport {\n  Redirect\n} from \"react-router-dom\"\nimport { countryCollection, config } from '../../core/Store'\nimport Dashboard from '../Dashboard'\nimport CountryList from '../CountryList'\nimport './style.css'\n\nclass Main extends React.Component {\n  constructor(props){\n    super(props)\n    this.state = {}\n  }\n\n  render(){\n    // let { countryCode } = useParams()\n    let countryCode = this.props.match.params.countryCode\n\n    if(!countryCode){\n      return <Redirect to={config.defaultCountryCode} />\n    }\n\n    let hasCountry = countryCollection.hasCountry(countryCode)\n\n    if(!hasCountry){\n      alert('There is no data for this country.')\n    }\n\n\n    return (\n      <div className=\"main\">\n        <CountryList />\n        <Dashboard countryCode={countryCode}/>\n      </div>\n    )\n  }\n}\n\nexport default Main\n","import React from \"react\";\nimport {\n  HashRouter,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nimport Main from './views/Main'\n\nexport default function ParamsExample() {\n  return (\n    <HashRouter>\n        <Switch>\n          <Route path=\"/:countryCode\" component={Main} />\n          <Route path=\"/\" component={Main} />\n        </Switch>\n    </HashRouter>\n  );\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport loadData from './core/loadData'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\n\nasync function init(){\n  // first; lets fetch data\n  console.log('loading data...');\n  await loadData()\n  console.log('done loading data')\n\n  ReactDOM.render(<App />, document.getElementById('root'))\n\n  // If you want your app to work offline and load faster, you can change\n  // unregister() to register() below. Note this comes with some pitfalls.\n  // Learn more about service workers: https://bit.ly/CRA-PWA\n  // serviceWorker.unregister()\n}\n\ninit()\n"],"sourceRoot":""}